require 'json'
require 'securerandom' # SecureRandom.uuid 

require_relative 'oms_common'

module OMS
    class Antimalware

        def initialize(log)
            @log = log
        end

        # ------------------------------------------------------
        def transform_and_wrap(results, hostname, time)
            if results.nil?
                @log.error "Antimalware Assessment failed; Empty input for result"
                wrapper = {
                    "DataType"=>"OPERATION_BLOB",
                    "IPName"=>"LogManagement",
                    "DataItems"=>[
                        {
                            "Timestamp" => OMS::Common.format_time(time),
                            "OperationStatus" => "Error",
                            "Computer" => hostname,
                            "Category" => "Antimalware",
                            "Solution" => "Antimalware",
                            "Detail" => "Antimalware Assessment failed: Empty output"
                        }
                    ]
                }
                # In this case result is null, return null for antimalware_blob and error log
                return nil, wrapper
            end

            if !results["Error"].nil?              
                msg = "Antimalware Assessment encountered some errors but still return the result: " + results["Error"]
                @log.error msg
                wrapper = {
                    "DataType"=>"OPERATION_BLOB",
                    "IPName"=>"LogManagement",
                    "DataItems"=>[
                        {
                            "Timestamp" => OMS::Common.format_time(time),
                            "OperationStatus" => "Error",
                            "Computer" => hostname,
                            "Category" => "Antimalware",
                            "Solution" => "Antimalware",
                            "Detail" => msg
                        }
                    ]
                }
                # Remove the log error from antimalware results
                results.delete("Error")
                antimalware_blob = {
                    "DataType"=>"ANTIMALWARE_BLOB", 
                    "IPName"=>"Antimalware",
                    "DataItems"=>[
                        results
                    ]
                }
                return antimalware_blob, wrapper
            end
            
            # No error logs found, return results directly and null for operation blob
            antimalware_blob = {
                "DataType"=>"ANTIMALWARE_BLOB", 
                "IPName"=>"Antimalware",
                "DataItems"=>[
                    results
                ]
            }
            @log.info "Antimalware info collected successfully"                
            return antimalware_blob, nil            
        end # transform_and_wrap
    end
end