require_relative 'antimalware_lib'
require_relative 'oms_common'

module Fluent
  class AntimalwareFilter < Filter

    Fluent::Plugin.register_filter('filter_antimalware', self)

    def configure(conf)
        super
        # Do the usual configuration here
        @hostname = OMS::Common.get_hostname or "Unknown host"
    end

    def start
        super
        # This is the first method to be called when it starts running
        # Use it to allocate resources, etc.
    end

    def shutdown
        super
        # This method is called when Fluentd is shutting down.
        # Use it to free up resources, etc.
    end

    def filter(tag, time, record)
        # Create Antimalware blob and Operation blobs based on collectantimalwareinfo script scan & assessment results
        antimalware = OMS::Antimalware.new(@log)
        antimalware_blob, operation_blob = antimalware.transform_and_wrap(record, @hostname, time)

        if !antimalware_blob.nil?
            # Send Antimalware Assessment result to FuentD pipeline.
            # The data is formatted in correct ODS format and no more handling is required
            Fluent::Engine.emit("oms.antimalware", time, antimalware_blob)
        end

        if !operation_blob.nil?
            # Send Operation error to FuentD pipeline if operation blob is not null.
            # The data is formatted in correct ODS format and no more handling is required
            return operation_blob
        end
    end # filter
  end # class
end # module